// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: txfromcsv/proto/tx_state.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TxOps_TxPop_FullMethodName = "/v1.TxOps/TxPop"
)

// TxOpsClient is the client API for TxOps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxOpsClient interface {
	TxPop(ctx context.Context, in *TxData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type txOpsClient struct {
	cc grpc.ClientConnInterface
}

func NewTxOpsClient(cc grpc.ClientConnInterface) TxOpsClient {
	return &txOpsClient{cc}
}

func (c *txOpsClient) TxPop(ctx context.Context, in *TxData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TxOps_TxPop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxOpsServer is the server API for TxOps service.
// All implementations must embed UnimplementedTxOpsServer
// for forward compatibility
type TxOpsServer interface {
	TxPop(context.Context, *TxData) (*emptypb.Empty, error)
	mustEmbedUnimplementedTxOpsServer()
}

// UnimplementedTxOpsServer must be embedded to have forward compatible implementations.
type UnimplementedTxOpsServer struct {
}

func (UnimplementedTxOpsServer) TxPop(context.Context, *TxData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxPop not implemented")
}
func (UnimplementedTxOpsServer) mustEmbedUnimplementedTxOpsServer() {}

// UnsafeTxOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxOpsServer will
// result in compilation errors.
type UnsafeTxOpsServer interface {
	mustEmbedUnimplementedTxOpsServer()
}

func RegisterTxOpsServer(s grpc.ServiceRegistrar, srv TxOpsServer) {
	s.RegisterService(&TxOps_ServiceDesc, srv)
}

func _TxOps_TxPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxOpsServer).TxPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TxOps_TxPop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxOpsServer).TxPop(ctx, req.(*TxData))
	}
	return interceptor(ctx, in, info, handler)
}

// TxOps_ServiceDesc is the grpc.ServiceDesc for TxOps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TxOps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TxOps",
	HandlerType: (*TxOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TxPop",
			Handler:    _TxOps_TxPop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "txfromcsv/proto/tx_state.proto",
}
